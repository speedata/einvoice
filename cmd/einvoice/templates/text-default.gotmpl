{{- /*
  Responsive invoice template (narrow / wide)
  Requirements:
    - Go code sets `.TermWidth`
    - FuncMap provides: hr(int)->string, padright(string,int)->string, wrap(string,int)->string,
                        min(int,int)->int, max(int,int)->int, sub1(int)->int
*/ -}}

{{- $w := .TermWidth -}}

{{ underline "Invoice Information" }}
Invoice Number:  {{.Number}}
Date:            {{.Date}}
Type:            {{.Type}}
Profile:         {{.Profile}}
{{- if .BusinessProcess }}
Business Process: {{.BusinessProcess}}
{{- end }}
Currency:        {{.Currency}}

{{if ge $w 60 -}}
{{ padright "Seller" 40 -}}              {{ "Buyer"}}
{{ padright "------" 40 -}}              {{ "-----"}}
{{ padright .Seller.Name 40 -}}          {{ .Buyer.Name }}

{{- if or .Seller.Address .Buyer.Address }}
{{ padright (printf "%s %s" .Seller.Address.PostalCode .Seller.Address.City) 40 -}}
{{ (printf "%s %s" .Buyer.Address.PostalCode .Buyer.Address.City)}}
{{ padright .Seller.Address.Country 40 -}} {{ .Buyer.Address.Country }}
{{- end }}

{{- if or .Seller.VATNumber .Buyer.VATNumber }}
VAT: {{ padright .Seller.VATNumber 35 -}}{{ .Buyer.VATNumber }}
{{ end }}
{{- else -}}
Seller:
  {{.Seller.Name}}
  {{- if .Seller.Address }}
  {{.Seller.Address.PostalCode}} {{.Seller.Address.City}}
  {{.Seller.Address.Country}}
  {{- end }}
  {{- if .Seller.VATNumber }}
  VAT: {{.Seller.VATNumber}}
  {{- end }}
Buyer:
  {{.Buyer.Name}}
  {{- if .Buyer.Address }}
  {{.Buyer.Address.PostalCode}} {{.Buyer.Address.City}}
  {{.Buyer.Address.Country}}
  {{- end }}
  {{- if .Buyer.VATNumber }}
  VAT: {{.Buyer.VATNumber}}
  {{- end }}
{{- end }}

{{ underline (printf "%s (%d items)" "Invoice Lines" .LineCount) }}
{{- range .Lines }}
{{- if ge $w 80 }}
{{ padright (printf "Line %s" .ID) 10 }} {{ if .Description }}{{ .Description }}{{ end }}
{{ padright "" 10 }} Qty: {{ .Quantity }}   Unit: {{ .UnitPrice }} {{ $.Currency }}   Net: {{ .NetAmount }} {{ $.Currency }}
{{- else }}
Line {{ .ID }}:
{{ if .Description }} Description: {{ wrap .Description (max (min $w 60) 30) }}{{ end }}
{{ if .Quantity }} Quantity: {{ .Quantity }}{{ end }}
{{ if .UnitPrice }} Unit Price: {{ .UnitPrice }} {{ $.Currency }}{{ end }}
 Net Amount: {{ .NetAmount }} {{ $.Currency }}
{{- end }}
{{- end }}

{{ underline "Totals" }}
{{- $wd := 30 }}
{{ padmiddle "Line Total:" (printf "%s %s" .Totals.LineTotal .Currency) $wd }} {{- /* left column */ -}}
{{- if .Totals.AllowanceTotal }}{{padmiddle "Allowances:" (printf "-%s %s" .Totals.AllowanceTotal .Currency) $wd }}{{ end }}
{{- if .Totals.ChargeTotal }}
{{ padright "" $wd }} Charges:    +{{ .Totals.ChargeTotal }} {{ .Currency }}
{{- end }}
{{ padmiddle "Tax Basis:"   (printf "%s %s" .Totals.TaxBasisTotal .Currency) $wd }}
{{ padmiddle "Tax Total:"   (printf "%s %s" .Totals.TaxTotal      .Currency) $wd }}
{{ padmiddle "Grand Total:" (printf "%s %s" .Totals.GrandTotal    .Currency) $wd  }}
{{- if .Totals.TotalPrepaid }}Prepaid:         -{{ .Totals.TotalPrepaid }} {{ .Currency }}{{ end }}
{{- if .Totals.RoundingAmount }}
Rounding:        {{ .Totals.RoundingAmount }} {{ .Currency }}
{{- end }}
{{ padmiddle "Due Amount:"  (printf "%s %s" .Totals.DuePayableAmount .Currency) $wd }}

{{if .PaymentTerms }}
{{ underline "Payment Terms" }}
{{- range .PaymentTerms }}
{{ wrap . $w}}
{{- end }}
{{- end }}

{{ if .Notes }}
{{ underline "Notes" }}
{{- range $i, $n := .Notes }}
Note {{ add $i 1 }}: {{if $n.SubjectQualifier }}{{ $n.SubjectQualifier }}{{ else }}General{{ end }}
{{ $n.Text }}
{{- if lt $i (sub1 (len $.Notes)) }}
{{ hr 10 }}
{{- end }}
{{- end }}
{{- end }}

