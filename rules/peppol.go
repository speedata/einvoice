// Code generated by genrules from EN16931-CII-model.sch; DO NOT EDIT.
// Source: https://github.com/ConnectingEurope/eInvoicing-EN16931
// Version: 3.0.19
// Generated: 2025-10-07T14:48:56Z

package rules

var (
	DKR2 = Rule{
		Code:        "DK-R-002",
		Fields:      nil,
		Description: `Danish suppliers MUST provide legal entity.`,
	}
	DKR3 = Rule{
		Code:        "DK-R-003",
		Fields:      nil,
		Description: `If ItemClassification is provided from Danish suppliers, UNSPSC version 19.05.01 or 26.08.01 should be used`,
	}
	DKR4 = Rule{
		Code:        "DK-R-004",
		Fields:      nil,
		Description: `When specifying non-VAT Taxes for Danish customers, Danish suppliers MUST use the AllowanceChargeReasonCode="ZZZ" and MUST be specified in AllowanceChargeReason; Either as the 4-digit Tax category or must include a #, but the # is not allowed as first and last character`,
	}
	DKR5 = Rule{
		Code:        "DK-R-005",
		Fields:      nil,
		Description: `For Danish suppliers the following Payment means type codes are allowed: 1, 10, 31, 42, 48, 49, 50, 58, 59, 93 and 97`,
	}
	DKR6 = Rule{
		Code:        "DK-R-006",
		Fields:      nil,
		Description: `For Danish suppliers, bank account and registration account are mandatory if payment means is 31 or 42`,
	}
	DKR7 = Rule{
		Code:        "DK-R-007",
		Fields:      nil,
		Description: `For Danish suppliers DirectDebitMandateID and CreditorReferenceID are mandatory when payment means is 49`,
	}
	DKR8 = Rule{
		Code:        "DK-R-008",
		Fields:      nil,
		Description: `For Danish Suppliers PaymentReference is mandatory and MUST start with 01#, 04# or 15# (kortartkode), and PayeePartyCreditorFinancialAccount/IBANID (Giro kontonummer) is mandatory and must be 7 characters long, when payment means equals 50 (Giro)`,
	}
	DKR9 = Rule{
		Code:        "DK-R-009",
		Fields:      nil,
		Description: `For Danish Suppliers if the PaymentReference is prefixed with 04# or 015# the 16 digits instruction Id must be added to the PaymentReference eg. "04#1234567890123456" when Payment means equals 50 (Giro)`,
	}
	DKR10 = Rule{
		Code:        "DK-R-010",
		Fields:      nil,
		Description: `For Danish Suppliers the PaymentReference is mandatory and MUST start with 71#, 73# or 75# (kortartkode) and and PayeePartyCreditorFinancialAccount/IBANID (Kreditornummer) is mandatory and must be exactly 8 characters long, when Payment means equals 93 (FIK)`,
	}
	DKR11 = Rule{
		Code:        "DK-R-011",
		Fields:      nil,
		Description: `For Danish Suppliers if the PaymentReference is prefixed with 71# or 75# the 15-16 digits instruction Id must be added to the PaymentReference eg. "71#1234567890123456" when payment Method equals 93 (FIK)`,
	}
	DKR13 = Rule{
		Code:        "DK-R-013",
		Fields:      nil,
		Description: `For Danish Suppliers it is mandatory to use schemeID when GlobalID is used for SellerTradeParty or BuyerTradeParty`,
	}
	DKR14 = Rule{
		Code:        "DK-R-014",
		Fields:      nil,
		Description: `For Danish Suppliers it is mandatory to specify schemeID as "0184" when SpecifiedLegalOrganization is used for SellerTradeParty`,
	}
	DKR16 = Rule{
		Code:        "DK-R-016",
		Fields:      nil,
		Description: `For Danish Suppliers, a Credit note cannot have a negative total (DuePayableAmount)`,
	}
	ITR1 = Rule{
		Code:        "IT-R-001",
		Fields:      nil,
		Description: `[IT-R-001] BT-32 (Seller tax registration identifier) - For Italian suppliers BT-32 minimum length 11 and maximum length shall be 16. Per i fornitori italiani il BT-32 deve avere una lunghezza tra 11 e 16 caratteri`,
	}
	ITR2 = Rule{
		Code:        "IT-R-002",
		Fields:      nil,
		Description: `[IT-R-002] BT-35 (Seller address line 1) - Italian suppliers MUST provide the postal address line 1 - I fornitori italiani devono indicare l'indirizzo postale.`,
	}
	ITR3 = Rule{
		Code:        "IT-R-003",
		Fields:      nil,
		Description: `[IT-R-003] BT-37 (Seller city) - Italian suppliers MUST provide the postal address city - I fornitori italiani devono indicare la città di residenza.`,
	}
	ITR4 = Rule{
		Code:        "IT-R-004",
		Fields:      nil,
		Description: `[IT-R-004] BT-38 (Seller post code) - Italian suppliers MUST provide the postal address post code - I fornitori italiani devono indicare il CAP di residenza.`,
	}
	NLR1 = Rule{
		Code:        "NL-R-001",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if the document is a creditnote, the document MUST contain an invoice reference (ram:ApplicableHeaderTradeSettlement/ram:InvoiceReferencedDocument/ram:IssuerAssignedID)`,
	}
	NLR2 = Rule{
		Code:        "NL-R-002",
		Fields:      nil,
		Description: `For suppliers in the Netherlands the supplier's address (ram:SellerTradeParty/ram:PostalTradeAddress) MUST contain street name (ram:LineOne), city (ram:CityName) and post code (ram:PostcodeCode)`,
	}
	NLR3 = Rule{
		Code:        "NL-R-003",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, the legal entity identifier MUST be either a KVK or OIN number (schemeID 0106 or 0190)`,
	}
	NLR4 = Rule{
		Code:        "NL-R-004",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if the customer is in the Netherlands, the customer address (ram:BuyerTradeParty/ram:PostalTradeAddress) MUST contain street name (ram:LineOne), city (ram:CityName) and post code (ram:PostcodeCode)`,
	}
	NLR5 = Rule{
		Code:        "NL-R-005",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if the customer is in the Netherlands, the customer's legal entity identifier MUST be either a KVK or OIN number (schemeID 0106 or 0190)`,
	}
	NLR6 = Rule{
		Code:        "NL-R-006",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if the fiscal representative is in the Netherlands, the representative's address (ram:SellerTaxRepresentativeTradeParty/ram:PostalTradeAddress) MUST contain street name (ram:LineOne), city (ram:CityName) and post code (ram:PostcodeCode)`,
	}
	NLR7 = Rule{
		Code:        "NL-R-007",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, the supplier MUST provide a means of payment (ram:SpecifiedTradeSettlementPaymentMeans) if the payment is from customer to supplier`,
	}
	NLR8 = Rule{
		Code:        "NL-R-008",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if the customer is in the Netherlands, the payment means code (ram:SpecifiedTradeSettlementPaymentMeans/ram:TypeCode) MUST be one of 30, 48, 49, 57, 58 or 59`,
	}
	NLR9 = Rule{
		Code:        "NL-R-009",
		Fields:      nil,
		Description: `For suppliers in the Netherlands, if an order line reference (ram:BuyerOrderReferencedDocument/ram:LineID) is used, there must be an order reference on the document level (rsm:SupplyChainTradeTransaction/ram:ApplicableHeaderTradeAgreement/ram:BuyerOrderReferencedDocument/ram:IssuerAssignedID)`,
	}
	NOR1 = Rule{
		Code:        "NO-R-001",
		Fields:      nil,
		Description: `For Norwegian suppliers, a VAT number MUST be the country code prefix NO followed by a valid Norwegian organization number (nine numbers) followed by the letters MVA.`,
	}
	NOR2 = Rule{
		Code:        "NO-R-002",
		Fields:      nil,
		Description: `Most invoice issuers are required to append "Foretaksregisteret" to their invoice. "Dersom selger er aksjeselskap, allmennaksjeselskap eller filial av utenlandsk selskap skal også ordet «Foretaksregisteret» fremgå av salgsdokumentet, jf. foretaksregisterloven § 10-2."`,
	}
	PEPPOLCOMMONR40 = Rule{
		Code:        "PEPPOL-COMMON-R040",
		Fields:      nil,
		Description: `GLN must have a valid format according to GS1 rules.`,
	}
	PEPPOLCOMMONR41 = Rule{
		Code:        "PEPPOL-COMMON-R041",
		Fields:      nil,
		Description: `Norwegian organization number MUST be stated in the correct format.`,
	}
	PEPPOLCOMMONR42 = Rule{
		Code:        "PEPPOL-COMMON-R042",
		Fields:      nil,
		Description: `Danish organization number (CVR) MUST be stated in the correct format.`,
	}
	PEPPOLCOMMONR43 = Rule{
		Code:        "PEPPOL-COMMON-R043",
		Fields:      nil,
		Description: `Belgian enterprise number MUST be stated in the correct format.`,
	}
	PEPPOLCOMMONR44 = Rule{
		Code:        "PEPPOL-COMMON-R044",
		Fields:      nil,
		Description: `IPA Code (Codice Univoco Unità Organizzativa) must be stated in the correct format`,
	}
	PEPPOLCOMMONR45 = Rule{
		Code:        "PEPPOL-COMMON-R045",
		Fields:      nil,
		Description: `Tax Code (Codice Fiscale) must be stated in the correct format`,
	}
	PEPPOLCOMMONR46 = Rule{
		Code:        "PEPPOL-COMMON-R046",
		Fields:      nil,
		Description: `Tax Code (Codice Fiscale) must be stated in the correct format`,
	}
	PEPPOLCOMMONR47 = Rule{
		Code:        "PEPPOL-COMMON-R047",
		Fields:      nil,
		Description: `Italian VAT Code (Partita Iva) must be stated in the correct format`,
	}
	PEPPOLCOMMONR48 = Rule{
		Code:        "PEPPOL-COMMON-R048",
		Fields:      nil,
		Description: `Italian VAT Code (Partita Iva) must be stated in the correct format`,
	}
	PEPPOLCOMMONR49 = Rule{
		Code:        "PEPPOL-COMMON-R049",
		Fields:      nil,
		Description: `Swedish organization number MUST be stated in the correct format.`,
	}
	PEPPOLCOMMONR50 = Rule{
		Code:        "PEPPOL-COMMON-R050",
		Fields:      nil,
		Description: `Australian Business Number (ABN) MUST be stated in the correct format.`,
	}
	PEPPOLEN16931CL1 = Rule{
		Code:        "PEPPOL-EN16931-CL001",
		Fields:      nil,
		Description: `Mime code must be according to subset of IANA code list.`,
	}
	PEPPOLEN16931CL2 = Rule{
		Code:        "PEPPOL-EN16931-CL002",
		Fields:      nil,
		Description: `Reason code MUST be according to subset of UNCL 5189 D.16B.`,
	}
	PEPPOLEN16931CL3 = Rule{
		Code:        "PEPPOL-EN16931-CL003",
		Fields:      nil,
		Description: `Reason code MUST be according to UNCL 7161 D.16B.`,
	}
	PEPPOLEN16931CL7 = Rule{
		Code:        "PEPPOL-EN16931-CL007",
		Fields:      nil,
		Description: `Currency code must be according to ISO 4217:2005`,
	}
	PEPPOLEN16931CL8 = Rule{
		Code:        "PEPPOL-EN16931-CL008",
		Fields:      nil,
		Description: `Electronic address identifier scheme must be from the codelist "Electronic Address Identifier Scheme"`,
	}
	PEPPOLEN16931F1 = Rule{
		Code:        "PEPPOL-EN16931-F001",
		Fields:      nil,
		Description: `A date MUST be formatted YYYYMMDD.`,
	}
	PEPPOLEN16931P100 = Rule{
		Code:        "PEPPOL-EN16931-P0100",
		Fields:      nil,
		Description: `Invoice type code MUST be set according to the profile.`,
	}
	PEPPOLEN16931R1 = Rule{
		Code:        "PEPPOL-EN16931-R001",
		Fields:      nil,
		Description: `Business process MUST be provided.`,
	}
	PEPPOLEN16931R2 = Rule{
		Code:        "PEPPOL-EN16931-R002",
		Fields:      nil,
		Description: `No more than one note is allowed on document level.`,
	}
	PEPPOLEN16931R3 = Rule{
		Code:        "PEPPOL-EN16931-R003",
		Fields:      nil,
		Description: `A buyer reference or purchase order reference MUST be provided.`,
	}
	PEPPOLEN16931R4 = Rule{
		Code:        "PEPPOL-EN16931-R004",
		Fields:      nil,
		Description: `Specification identifier MUST have the value 'urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0'.`,
	}
	PEPPOLEN16931R5 = Rule{
		Code:        "PEPPOL-EN16931-R005",
		Fields:      nil,
		Description: `VAT accounting currency code MUST be different from invoice currency code when provided.`,
	}
	PEPPOLEN16931R6 = Rule{
		Code:        "PEPPOL-EN16931-R006",
		Fields:      nil,
		Description: `Only one invoiced object is allowed on document level`,
	}
	PEPPOLEN16931R7 = Rule{
		Code:        "PEPPOL-EN16931-R007",
		Fields:      nil,
		Description: `Business process MUST be in the format 'urn:fdc:peppol.eu:2017:poacc:billing:NN:1.0' where NN indicates the process number.`,
	}
	PEPPOLEN16931R10 = Rule{
		Code:        "PEPPOL-EN16931-R010",
		Fields:      nil,
		Description: `Buyer electronic address MUST be provided`,
	}
	PEPPOLEN16931R20 = Rule{
		Code:        "PEPPOL-EN16931-R020",
		Fields:      nil,
		Description: `Seller electronic address MUST be provided`,
	}
	PEPPOLEN16931R40 = Rule{
		Code:        "PEPPOL-EN16931-R040",
		Fields:      nil,
		Description: `Allowance/charge amount must equal base amount * percentage/100 if base amount and percentage exists`,
	}
	PEPPOLEN16931R41 = Rule{
		Code:        "PEPPOL-EN16931-R041",
		Fields:      nil,
		Description: `Allowance/charge base amount MUST be provided when allowance/charge percentage is provided.`,
	}
	PEPPOLEN16931R42 = Rule{
		Code:        "PEPPOL-EN16931-R042",
		Fields:      nil,
		Description: `Allowance/charge percentage MUST be provided when allowance/charge base amount is provided.`,
	}
	PEPPOLEN16931R43 = Rule{
		Code:        "PEPPOL-EN16931-R043",
		Fields:      nil,
		Description: `Allowance/charge ChargeIndicator value MUST equal 'true' or 'false'`,
	}
	PEPPOLEN16931R53 = Rule{
		Code:        "PEPPOL-EN16931-R053",
		Fields:      nil,
		Description: `Only one tax total with tax subtotals MUST be provided.`,
	}
	PEPPOLEN16931R54 = Rule{
		Code:        "PEPPOL-EN16931-R054",
		Fields:      nil,
		Description: `Only one tax total without tax subtotals MUST be provided when tax currency code is provided.`,
	}
	PEPPOLEN16931R55 = Rule{
		Code:        "PEPPOL-EN16931-R055",
		Fields:      nil,
		Description: `Invoice total VAT amount and Invoice total VAT amount in accounting currency MUST have the same operational sign`,
	}
	PEPPOLEN16931R61 = Rule{
		Code:        "PEPPOL-EN16931-R061",
		Fields:      nil,
		Description: `Mandate reference MUST be provided for direct debit.`,
	}
	PEPPOLEN16931R80 = Rule{
		Code:        "PEPPOL-EN16931-R080",
		Fields:      nil,
		Description: `Only one project reference is allowed on document level`,
	}
	PEPPOLEN16931R100 = Rule{
		Code:        "PEPPOL-EN16931-R100",
		Fields:      nil,
		Description: `Only one invoiced object is allowed pr line`,
	}
	PEPPOLEN16931R101 = Rule{
		Code:        "PEPPOL-EN16931-R101",
		Fields:      nil,
		Description: `Element Document reference can only be used for Invoice line object`,
	}
	PEPPOLEN16931R110 = Rule{
		Code:        "PEPPOL-EN16931-R110",
		Fields:      nil,
		Description: `Start date of line period MUST be within invoice period.`,
	}
	PEPPOLEN16931R111 = Rule{
		Code:        "PEPPOL-EN16931-R111",
		Fields:      nil,
		Description: `End date of line period MUST be within invoice period.`,
	}
	PEPPOLEN16931R120 = Rule{
		Code:        "PEPPOL-EN16931-R120",
		Fields:      nil,
		Description: `Invoice line net amount MUST equal (Invoiced quantity * (Item net price/item price base quantity) + Sum of invoice line charge amount - sum of invoice line allowance amount`,
	}
	PEPPOLEN16931R121 = Rule{
		Code:        "PEPPOL-EN16931-R121",
		Fields:      nil,
		Description: `Base quantity MUST be a positive number above zero.`,
	}
	PEPPOLEN16931R130 = Rule{
		Code:        "PEPPOL-EN16931-R130",
		Fields:      nil,
		Description: `Unit code of price base quantity MUST be same as invoiced quantity.`,
	}
	SER1 = Rule{
		Code:        "SE-R-001",
		Fields:      nil,
		Description: `For Swedish suppliers, Swedish VAT-numbers must consist of 14 characters.`,
	}
	SER2 = Rule{
		Code:        "SE-R-002",
		Fields:      nil,
		Description: `For Swedish suppliers, the Swedish VAT-numbers must have the trailing 12 characters in numeric form`,
	}
	SER3 = Rule{
		Code:        "SE-R-003",
		Fields:      nil,
		Description: `Swedish organisation numbers should be numeric.`,
	}
	SER4 = Rule{
		Code:        "SE-R-004",
		Fields:      nil,
		Description: `Swedish organisation numbers consist of 10 characters.`,
	}
	SER5 = Rule{
		Code:        "SE-R-005",
		Fields:      nil,
		Description: `For Swedish suppliers, when using Seller tax registration identifier, 'Godkänd för F-skatt' must be stated`,
	}
	SER6 = Rule{
		Code:        "SE-R-006",
		Fields:      nil,
		Description: `For Swedish suppliers, only standard VAT rate of 6, 12 or 25 are used`,
	}
	SER7 = Rule{
		Code:        "SE-R-007",
		Fields:      nil,
		Description: `For Swedish suppliers using Plusgiro, the Account ID must be numeric`,
	}
	SER8 = Rule{
		Code:        "SE-R-008",
		Fields:      nil,
		Description: `For Swedish suppliers using Bankgiro, the Account ID must be numeric`,
	}
	SER9 = Rule{
		Code:        "SE-R-009",
		Fields:      nil,
		Description: `For Swedish suppliers using Bankgiro, the Account ID must have 7-8 characters`,
	}
	SER10 = Rule{
		Code:        "SE-R-010",
		Fields:      nil,
		Description: `For Swedish suppliers using Plusgiro, the Account ID must have 2-8 characters`,
	}
	SER11 = Rule{
		Code:        "SE-R-011",
		Fields:      nil,
		Description: `For Swedish suppliers using Swedish Bankgiro or Plusgiro, the proper way to indicate this is to use Code 30 for PaymentMeans and FinancialInstitutionBranch ID with code SE:BANKGIRO or SE:PLUSGIRO`,
	}
	SER12 = Rule{
		Code:        "SE-R-012",
		Fields:      nil,
		Description: `For domestic transactions between Swedish trading partners, credit transfer should be indicated by PaymentMeansCode=”30”`,
	}
	SER13 = Rule{
		Code:        "SE-R-013",
		Fields:      nil,
		Description: `The last digit of a Swedish organization number must be valid according to the Luhn algorithm.`,
	}
)
