name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24', '1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      shell: bash
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    # - name: Check coverage threshold
    #   if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
    #   shell: bash
    #   run: |
    #     COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
    #     echo "Coverage: ${COVERAGE}%"
    #     if (( $(echo "$COVERAGE < 80" | bc -l) )); then
    #       echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
    #       exit 1
    #     else
    #       echo "✅ Coverage ${COVERAGE}% meets 80% threshold"
    #     fi

    # - name: Upload coverage
    #   if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./coverage.txt
    #     fail_ci_if_error: false
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
